@top[name=Program] { expression* }

@skip { whitespace | LineComment | Discard }
expression { Boolean | Nil | Deref | Quote | SyntaxQuote | Unquote | UnquoteSplice | Symbol | Number | Meta | Keyword | List | Vector | Map | String | Character | Set | NamespacedMap | RegExp | Var | ReaderConditional | DataLiteral | SymbolicValue | AnonymousFunction | FnArg }
Discard { "#_" expression }

@precedence { docString @left, operator @left}

listContents {
  defList  { defLike  VarName (DocString expression+ | expression+)? } |
  defnList { defnLike VarName DocString? Map? (Vector expression* | List { "(" Vector expression* ")"}+) } |
  anyList { Operator? expression* }
}

List { "(" listContents ")" }
Vector { "[" expression* "]" }
Map { "{" expression* "}" }
AnonymousFunction { "#(" listContents ")" }


@skip {} {
  Set { "#" Map }
  NamespacedMap { "#" Keyword Map }
  RegExp { "#" String }
  Var { "#'" Symbol }
  ReaderConditional { "#?" (List | Deref) }
  DataLiteral { "#" ident }
  SymbolicValue { "##" simpleIdent }
  Meta { ("^" | "#^") expression}
  String { '"' stringContents? '"' }
}

DocString { !docString String }
Deref { "@" expression }
Quote { "'" expression }
SyntaxQuote { "`" expression }
Unquote { "~" expression }
UnquoteSplice { "~@" expression }
VarName { Meta? Symbol }
Symbol { ident }
Operator { !operator ident }

@tokens {


  "["
  "{"
  "("
  "#{"
  "#("
  "]"
  "}"
  ")"
  "#"
  '"'

  whitespace { (std.whitespace | ",")+ }

  LineComment { ";" ![\n]* }

  identStart { std.asciiLetter | $[<>_=?!*+\-$\u{a1}-\u{10ff}] }
  identChar { identStart (std.digit | ":" | "." | "'" | "#")* }
  simpleIdent { identStart identChar* }
  qualifiedIdent { simpleIdent "/" identChar+ }
  ident { simpleIdent | qualifiedIdent }

  Keyword { ":" ":"? ident }

  Number {
    ("+" | "-")? (std.digit+ ("." std.digit* "M"?)? | "." std.digit+) (("e" | "E") ("+" | "-")? std.digit+ "M"?)? |
    ("+" | "-")? std.digit+ ("M" | "N") |
    ("+" | "-")? std.digit+ "/" std.digit+ |
    ("+" | "-")? "0x" (std.digit | $[a-fA-F])+ |
    "0b" $[01]+ |
    "0o" $[0-7]+
  }
  @precedence { Number, ident }

  stringContents {
    (!["] | "\\" _)+
  }

  Character { "\\" (std.asciiLetter | std.digit | "@")+ }

  FnArg[name=Symbol] { "%" (std.digit* | "&"?) }

}

Boolean { @specialize<ident, "true" | "false"> }
Nil { @specialize<ident, "nil"> }


Def[name=Operator] { @specialize<ident, "def"> }
defLike { Def }

Defn[name=Operator] { @specialize<ident, "defn"> }
DefnPrivate[name=Operator] { @specialize<ident, "defn-"> }
defnLike { Defn | DefnPrivate }

@detectDelim
