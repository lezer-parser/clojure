@external prop prefixColl from "./props"
@external prop coll from "./props"
@external prop prefixEdge from "./props"
@external prop sameEdge from "./props"

@top[name=Program] { maybeInvalidExpression* }

@skip { whitespace | LineComment | Discard }
expression { Boolean | Nil | Deref | Quote | SyntaxQuote | Unquote | UnquoteSplice | Symbol | Number | Keyword | List | Vector | Map | String | Character | Set | NamespacedMap | RegExp | Var | ReaderConditional | DataLiteral | SymbolicValue | AnonymousFunction | FnArg | Meta<expression> }
maybeInvalidExpression { expression | "]" | "}" | ")" }

Discard { "#_" maybeInvalidExpression }

@precedence { docString @left, operator @left, meta @right, closing @left }

listContents {
   defList { defLikeWithMeta varNameWithMeta (DocString expression+ | expression+)? } |
   anyList { operatorWithMeta? expression* }
 }

DocString { !docString String }
List[coll] { "(" listContents !closing ")" }
Vector[coll] { "[" expression* !closing "]" }
Map[coll] { "{" expression* !closing "}" }
VarName { Symbol }

@skip {} {
  Set[prefixColl] { "#" Map }
  AnonymousFunction[prefixColl] { "#" List }
  NamespacedMap[prefixColl] { "#" KeywordPrefix Map }
  RegExp[prefixColl] { "#" String }
  Var[prefixColl] { "#'" Symbol }
  ReaderConditional[prefixColl] { "#?" (List | Deref) }
  DataLiteral { "#" ident }
  SymbolicValue { "##" simpleIdent }
  ReaderMetadata[prefixColl] { "#^" expression }
  Metadata[prefixColl] { "^" expression }
  String { '"' StringContent? '"' }
}

Meta<t> { (Metadata | ReaderMetadata) !meta t }

Deref[prefixColl] { "@" expression }
Quote[prefixColl] { "'" expression }
SyntaxQuote[prefixColl] { "`" expression }
Unquote[prefixColl] { "~" expression }
UnquoteSplice[prefixColl] { "~@" expression }
operatorWithMeta { Operator | Meta<operatorWithMeta> }
defLikeWithMeta { DefLike | Meta<defLikeWithMeta> }
varNameWithMeta { VarName | Meta<varNameWithMeta> }

Operator { !operator Symbol }

@tokens {


  "["
  "{"
  "("

  "#"[prefixEdge]
  "##"[prefixEdge]
  "#'"[prefixEdge]
  "#?"[prefixEdge]
  "#^"[prefixEdge]
  "#_"[prefixEdge]

  '"'[sameEdge, closedBy='"', openedBy='"']
  "'"[prefixEdge]
  "`"[prefixEdge]
  "~"[prefixEdge]
  "~@"[prefixEdge]
  "^"[prefixEdge]
  "@"[prefixEdge]


  "]"
  "}"
  ")"

  whitespace { (std.whitespace | ",")+ }

  LineComment { ";" ![\n]* }

  identStart { std.asciiLetter | $[<>._=?!*+\-$\u{a1}-\u{10ff}] }
  identChar { identStart | std.digit | ":" | "'" | "#" }
  simpleIdent { identStart identChar* }
  qualifiedIdent { simpleIdent "/" identChar+ }
  ident { simpleIdent | qualifiedIdent }
  Symbol { ident }

  keyword { ":" ":"? ident }
  Keyword { keyword }
  KeywordPrefix[prefixEdge] { keyword }

  Number {
    ("+" | "-")? (std.digit+ ("." std.digit* "M"?)? | "." std.digit+) (("e" | "E") ("+" | "-")? std.digit+ "M"?)? |
    ("+" | "-")? std.digit+ ("M" | "N") |
    ("+" | "-")? std.digit+ "/" std.digit+ |
    ("+" | "-")? "0x" (std.digit | $[a-fA-F])+ |
    "0b" $[01]+ |
    "0o" $[0-7]+
  }
  @precedence { Number, Symbol }

  StringContent {
    (!["] | "\\" _)+
  }

  Character { "\\" (std.asciiLetter | std.digit | "@")+ }

  FnArg[name=Symbol] { "%" (std.digit* | "&"?) }

}

Boolean { @specialize<Symbol, "true" | "false"> }
Nil { @specialize<Symbol, "nil"> }
DefLike[dynamicPrecedence=1] { @extend<Symbol, "def" | "defn" | "defn-" | "defmacro" | "definline" | "defonce" | "deftest" | "defcard"> }

@detectDelim
