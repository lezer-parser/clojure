@top[name=Program] { expression* }

@skip { whitespace | LineComment | Ignored }
expression { Boolean | Nil | Deref | Quoted | SyntaxQuoted | Unquoted | Symbol | Number | Metadata | Keyword | List | Vector | Map | Set | String | Character | RegExp }
Ignored { IgnoreNext expression }
Quoted { Quote expression }
Unquoted { Unquote expression }
Metadata { Meta expression expression }
SyntaxQuoted { SyntaxQuote expression }

@precedence { listOperator @cut, docString @left }

listContents {
  defList { !listOperator Def Var (documentedExpression | undocumentedExpression)? } |
  anyList { expression* }
}

documentedExpression { DocString ~cont expression+ }
undocumentedExpression { expression ~cont expression* }

List { "(" listContents ")" }
Vector { "[" expression* "]" }
Map { "{" (expression expression)* "}" }
Set { "#{" expression* "}" }

DocString { !docString String }
Var { Symbol }

@tokens {
  whitespace { (std.whitespace | ",")+ }

  LineComment { ";" ![\n]* }
  IgnoreNext { "#_" }

  identifierChar { std.asciiLetter | $[_=/?!*+\-$\u{a1}-\u{10ff}] }

  Quote { "'" }
  SyntaxQuote { "`" }
  Unquote { "~" }
  Deref { "@" }
  Meta { "^" }
  Symbol { identifierChar (identifierChar | std.digit | ":" | "." | "'" )* }

  Keyword { (":" Symbol | "::" Symbol | ":" Symbol "/" Symbol) }

  Number {
    ("+" | "-")? (std.digit+ ("." std.digit* "M"?)? | "." std.digit+) (("e" | "E") ("+" | "-")? std.digit+ "M"?)? |
    ("+" | "-")? std.digit+ ("M" | "N") |
    ("+" | "-")? std.digit+ "/" std.digit+ |
    ("+" | "-")? "0x" (std.digit | $[a-fA-F])+ |
    "0b" $[01]+ |
    "0o" $[0-7]+
  }
  @precedence { Number, Symbol }
  
  String {
    '"' (!["] | "\\" _)* '"'?
  }

  Character { "\\" (std.asciiLetter | std.digit | "@")+ }

  RegExp { "#" '"' (!["] | "\\" _)* '"'? }

  "#{" "(" ")" "[" "]" "{" "}"

}


Boolean { @specialize<Symbol, "true" | "false"> }
Nil { @specialize<Symbol, "nil"> }
Def { @specialize<Symbol, "def"> }


@detectDelim
