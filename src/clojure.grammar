@top[name=Program] { expression* }

@skip { whitespace | LineComment | Ignored }
expression { Boolean | Nil | Deref | Quote | SyntaxQuote | Unquote | Symbol | Number | WithMeta | Keyword | List | Vector | Map | String | Character | Set | NamespacedMap | RegExp | Var | ReaderConditional | DataLiteral | SymbolicValue | AnonymousFunction}
Ignored { "#_" expression }
WithMeta { metaPrefix expression }

@precedence { listOperator @cut, docString @left, Symbol @left}

listContents {
  defList  { !listOperator Def  VarName (DocString expression+ | expression+)? } |
  defnList { !listOperator Defn VarName DocString? Map? (Vector expression* | List { "(" Vector expression* ")"}+) } |
  anyList { expression* }
}

list { "(" listContents ")" }
List { list }
Vector { "[" expression* "]" }
map { "{" (expression expression)* "}" }
Map { map }

@skip {} {
  Set { "#" map }
  AnonymousFunction { "#" list }
  NamespacedMap { "#" Keyword Map }
  RegExp { "#" string }
  Var { "#'" Symbol }
  ReaderConditional { "#?" (List | Deref) }
  DataLiteral { "#" ident }
  SymbolicValue { "##" simpleIdent }
  metaPrefix { "^" expression}
}

DocString { !docString String }
Deref { "@" expression }
Quote { "'" expression }
SyntaxQuote { "`" expression }
Unquote { "~" expression }
VarName { Symbol }

@tokens {
  whitespace { (std.whitespace | ",")+ }

  LineComment { ";" ![\n]* }

  identStart { std.asciiLetter | $[_=?!*+\-$\u{a1}-\u{10ff}] }
  identChar { identStart (std.digit | ":" | "." | "'")* }
  simpleIdent { identStart identChar* }
  qualifiedIdent { simpleIdent "/" identChar+ }
  ident { simpleIdent | qualifiedIdent }

  Symbol { ident }
  Keyword { ":" ":"? ident }

  Number {
    ("+" | "-")? (std.digit+ ("." std.digit* "M"?)? | "." std.digit+) (("e" | "E") ("+" | "-")? std.digit+ "M"?)? |
    ("+" | "-")? std.digit+ ("M" | "N") |
    ("+" | "-")? std.digit+ "/" std.digit+ |
    ("+" | "-")? "0x" (std.digit | $[a-fA-F])+ |
    "0b" $[01]+ |
    "0o" $[0-7]+
  }
  @precedence { Number, Symbol }

  string {
    '"' (!["] | "\\" _)* '"'?
  }

  String { string }

  Character { "\\" (std.asciiLetter | std.digit | "@")+ }

}

Boolean { @specialize<Symbol, "true" | "false"> }
Nil { @specialize<Symbol, "nil"> }
Def { @specialize<Symbol, "def"> }
Defn { @specialize<Symbol, "defn"> }

@detectDelim
