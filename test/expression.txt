# Add
(+ 1 2)
==>
Program(List(Operator,Number,Number))

# Numbers
42 +42 -42
==>
Program(Number,Number,Number)

# Number BigInt
42N +42N -42N 0 0N
==>
Program(Number,Number,Number,Number,Number)

# Number Leading Zero
042 +042 -042
==>
Program(Number,Number,Number)

# Number BigInt
9223372036854775808 -9223372036854775808 10000000000000000000000000000000000000000000000000 -10000000000000000000000000000000000000000000000000
==>
Program(Number,Number,Number,Number)

# Number Exponentials
0x42e +0x42e -0x42e
==>
Program(Number,Number,Number)

# Number Floating
42.23 +42.23 -42.23
==>
Program(Number,Number,Number)

# Number Floating
42.23 +42.23 -42.23
==>
Program(Number,Number,Number)

# Number BigDecimal
42.23M +42.23M -42.23M
==>
Program(Number,Number,Number)

# Number BigDecimal 2
1.0M +1.0M -1.0M +0.0M +0.M 0M -0.0M -0.M
==>
Program(Number,Number,Number,Number,Number,Number,Number,Number)

# Number Floating e
42.2e3 +42.2e+3 -42.2e-3
==>
Program(Number,Number,Number)

# Number Floating e3M
42.2e3M +42.2e+3M -42.2e-3M
==>
Program(Number,Number,Number)

# Number Double
+1.0e+1 +1.e+1 +1e+1 +1.0e1 +1.e1 +1e1
==>
Program(Number,Number,Number,Number,Number,Number)

# Number Double 2
+1.0e-1 +1.e-1 +1e-1 -1.0e1 -1.e1 -1e1 -1.0e-1 -1.e-1 -1e-1
==>
Program(Number,Number,Number,Number,Number,Number,Number,Number,Number)

# Number Double 3
+1.0 +1. 1.0 1. +0.0 0.0 -0.0 +0. -0. -1.0 -1.
==>
Program(Number,Number,Number,Number,Number,Number,Number,Number,Number,Number,Number)

# Number Ratio
4/2 +4/2 -4/2
==>
Program(Number,Number,Number)

# Literals
() {} []
==>
Program(List, Map, Vector)

# Sharps
#{} #"\d" #:kw{}
==>
Program(Set(Map), RegExp(String(StringContent)), NamespacedMap(KeywordPrefix,Map))

# Symbols
foo foo/bar *+!-_? abc:def:ghi abc.def/ghi abc/def.ghi abc:def/ghi:jkl.mno
==>
Program(Symbol,Symbol,Symbol,Symbol,Symbol,Symbol,Symbol)

# Keywords
:hi :hi/ho ::ho ::hi/ho :*+!-_? :abc:def:ghi
==>
Program(Keyword,Keyword,Keyword,Keyword,Keyword,Keyword)

# Boolean
true false
==>
Program(Boolean,Boolean)

# Strings
"hello" "and
 multiline"
==>
Program(String(StringContent), String(StringContent))

# Nil
nil
==>
Program(Nil)

# Characters
\f \u0194 \o123 \newline \A \@
==>
Program(Character,Character,Character,Character,Character,Character)

# Line comments
;; comment
;; another comment
==>
Program(LineComment, LineComment)

# Discard next form
:hello #_ :ignored
==>
Program(Keyword, Discard(Keyword))

# Discard next two forms
#_#_ :ignored also-ignored "not-ignored"
==>
Program(Discard(Discard(Keyword), Symbol), String(StringContent))


# Deref
@hello
==>
Program(Deref(Symbol))

# Quote
'bar
==> Program(Quote(Symbol))

# SyntaxQuote
`(1)
==> Program(SyntaxQuote(List(Number)))

# SyntaxQuote Unquote
`(vector ~x)
==> Program(SyntaxQuote(List(Operator,Unquote(Symbol))))

# SyntaxQuote Unquote-Splice
`(~@x)
==> Program(SyntaxQuote(List(UnquoteSplice(Symbol))))

# Meta
^{:hello :world} :my-expr #^String :more ^:dynamic :test
==> Program(Meta(Metadata(Map(Keyword,Keyword)),Keyword),Meta(Metadata(Symbol),Keyword),Meta(Metadata(Keyword),Keyword))

# Meta Multiple
^:dynamic ^ints obj
==> Program(Meta(Metadata(Keyword),Meta(Metadata(Symbol),Symbol)))

# Var
#'hello
==> Program(Var(Symbol))

# Reader Conditional
#?(:cljs "hello") #?@(:cljs ["hello"])
==> Program(ReaderConditional("#?", List(Keyword,String(StringContent))),ReaderConditional(Deref(List(Keyword,Vector(String(StringContent))))))

# Data Literal
#uuid
==> Program(DataLiteral)

# Symbolic Value
##Inf
==> Program(SymbolicValue)

# Anonymous Function
#(inc %)
==> Program(AnonymousFunction("#", List(Operator, Symbol)))

# Unbalanced map
{:x}
==> Program(Map(Keyword))

# Gensym
sym#
==> Program(Symbol)

# Earmuffs and channel macros
*sym* >! <! !x x? x! _ ,
==> Program(Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol)

# Def
(def foo)
==> Program(List("(",DefLike,VarName(Symbol),")"))

# Def + String
(defn foo "string")
==> Program(List("(",DefLike,VarName(Symbol),String(StringContent),")"))

# Def + DocString
(defn foo "string" :bar)
==> Program(List("(",DefLike,VarName(Symbol),DocString(String(StringContent)),Keyword")"))
